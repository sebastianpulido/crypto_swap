{"ast":null,"code":"var _jsxFileName = \"/Users/yeknomhtooms/Desktop/trae_blockchain_app1/frontend/src/components/SwapInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport AtomicSwapContract from '../contracts/AtomicSwap.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SwapInterface = ({\n  signer,\n  provider,\n  account,\n  onSwapCreated\n}) => {\n  _s();\n  const [swapDirection, setSwapDirection] = useState('eth-to-btc');\n  const [ethAmount, setEthAmount] = useState('');\n  const [cryptoAmount, setCryptoAmount] = useState('');\n  const [cryptoAddress, setCryptoAddress] = useState('');\n  const [ethAddress, setEthAddress] = useState('');\n  const [timelock, setTimelock] = useState(24); // hours\n  const [loading, setLoading] = useState(false);\n  const [swapResult, setSwapResult] = useState(null);\n  const [useCustomHashedSecret, setUseCustomHashedSecret] = useState(false);\n  const [customHashedSecret, setCustomHashedSecret] = useState('');\n  const swapOptions = {\n    'eth-to-btc': {\n      label: 'Ethereum → Bitcoin',\n      crypto: 'BTC',\n      unit: 'satoshis'\n    },\n    'btc-to-eth': {\n      label: 'Bitcoin → Ethereum',\n      crypto: 'BTC',\n      unit: 'satoshis'\n    },\n    'eth-to-doge': {\n      label: 'Ethereum → Dogecoin',\n      crypto: 'DOGE',\n      unit: 'dogeoshis'\n    },\n    'doge-to-eth': {\n      label: 'Dogecoin → Ethereum',\n      crypto: 'DOGE',\n      unit: 'dogeoshis'\n    }\n  };\n  const generateSwapId = () => {\n    return ethers.hexlify(ethers.randomBytes(32));\n  };\n  const generateSecret = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/generate-secret', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error generating secret:', error);\n      throw error;\n    }\n  };\n  const initiateEthToCryptoSwap = async cryptoType => {\n    try {\n      setLoading(true);\n      let secret, hashedSecret;\n      if (useCustomHashedSecret && customHashedSecret) {\n        hashedSecret = customHashedSecret;\n        secret = null; // We don't know the secret when using custom hashed secret\n      } else {\n        const secretData = await generateSecret();\n        secret = secretData.secret;\n        hashedSecret = secretData.hashedSecret;\n      }\n      const swapId = generateSwapId();\n      const timelockTimestamp = Math.floor(Date.now() / 1000) + timelock * 3600;\n\n      // Initialize contract\n      const contract = new ethers.Contract(AtomicSwapContract.address, AtomicSwapContract.abi, signer);\n\n      // Initiate swap on Ethereum\n      const tx = await contract.initiateSwap(swapId, account, ethers.ZeroAddress,\n      // ETH\n      ethers.parseEther(ethAmount), hashedSecret, timelockTimestamp, {\n        value: ethers.parseEther(ethAmount)\n      });\n      await tx.wait();\n\n      // Register swap with backend\n      const endpoint = cryptoType === 'btc' ? 'eth-to-btc' : 'eth-to-doge';\n      const response = await fetch(`http://localhost:3001/api/swap/${endpoint}/initiate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          swapId,\n          ethAmount: ethers.parseEther(ethAmount).toString(),\n          [cryptoType + 'Amount']: cryptoAmount,\n          [cryptoType + 'Address']: cryptoAddress,\n          hashedSecret,\n          timelock: timelockTimestamp\n        })\n      });\n      const result = await response.json();\n      setSwapResult({\n        swapId,\n        secret,\n        hashedSecret,\n        txHash: tx.hash,\n        message: `Ethereum to ${cryptoType.toUpperCase()} swap initiated successfully!`\n      });\n      onSwapCreated();\n    } catch (error) {\n      console.error('Error initiating swap:', error);\n      alert('Error initiating swap: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const initiateCryptoToEthSwap = async cryptoType => {\n    try {\n      setLoading(true);\n      let secret, hashedSecret;\n      if (useCustomHashedSecret && customHashedSecret) {\n        hashedSecret = customHashedSecret;\n        secret = null; // We don't know the secret when using custom hashed secret\n      } else {\n        const secretData = await generateSecret();\n        secret = secretData.secret;\n        hashedSecret = secretData.hashedSecret;\n      }\n      const swapId = generateSwapId();\n      const timelockTimestamp = Math.floor(Date.now() / 1000) + timelock * 3600;\n      const endpoint = cryptoType === 'btc' ? 'btc-to-eth' : 'doge-to-eth';\n      const response = await fetch(`http://localhost:3001/api/swap/${endpoint}/initiate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          swapId,\n          [cryptoType + 'Amount']: cryptoAmount,\n          ethAmount: ethers.parseEther(ethAmount).toString(),\n          ethAddress: ethAddress || account,\n          hashedSecret,\n          timelock: timelockTimestamp,\n          [cryptoType + 'SenderPubKey']: '02' + '0'.repeat(64),\n          // Placeholder\n          [cryptoType + 'RecipientPubKey']: '03' + '0'.repeat(64) // Placeholder\n        })\n      });\n      const result = await response.json();\n      setSwapResult({\n        swapId,\n        secret,\n        hashedSecret,\n        [cryptoType + 'SwapAddress']: result.data[cryptoType + 'SwapAddress'],\n        message: `${cryptoType.toUpperCase()} to Ethereum swap initiated! Please fund the ${cryptoType.toUpperCase()} address.`\n      });\n      onSwapCreated();\n    } catch (error) {\n      console.error('Error initiating swap:', error);\n      alert('Error initiating swap: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!ethAmount || !cryptoAmount) {\n      alert('Please enter both ETH and crypto amounts');\n      return;\n    }\n    if (useCustomHashedSecret && !customHashedSecret) {\n      alert('Please enter the hashed secret or uncheck the custom option');\n      return;\n    }\n    const [fromChain, toChain] = swapDirection.split('-to-');\n    if (fromChain === 'eth') {\n      if (!cryptoAddress) {\n        alert(`Please enter ${toChain.toUpperCase()} address`);\n        return;\n      }\n      await initiateEthToCryptoSwap(toChain);\n    } else {\n      await initiateCryptoToEthSwap(fromChain);\n    }\n  };\n  const currentOption = swapOptions[swapDirection];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"swap-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Direct Atomic Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"direct-description\",\n      children: \"Create direct peer-to-peer atomic swaps without intermediaries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-direction\",\n      children: Object.entries(swapOptions).map(([key, option]) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: key,\n          checked: swapDirection === key,\n          onChange: e => setSwapDirection(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), option.label]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"swap-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"ETH Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.001\",\n          value: ethAmount,\n          onChange: e => setEthAmount(e.target.value),\n          placeholder: \"0.1\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [currentOption.crypto, \" Amount (\", currentOption.unit, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: cryptoAmount,\n          onChange: e => setCryptoAmount(e.target.value),\n          placeholder: currentOption.crypto === 'BTC' ? \"1000000\" : \"100000000\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), swapDirection.startsWith('eth-to-') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [currentOption.crypto, \" Address:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: cryptoAddress,\n          onChange: e => setCryptoAddress(e.target.value),\n          placeholder: currentOption.crypto === 'BTC' ? \"bc1q...\" : \"D...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), swapDirection.endsWith('-to-eth') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Ethereum Address (optional):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ethAddress,\n          onChange: e => setEthAddress(e.target.value),\n          placeholder: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: useCustomHashedSecret,\n            onChange: e => setUseCustomHashedSecret(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), \"Use custom hashed secret (for responding to existing swaps)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), useCustomHashedSecret && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Hashed Secret:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: customHashedSecret,\n          onChange: e => setCustomHashedSecret(e.target.value),\n          placeholder: \"0x...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Enter the hashed secret from the original swap you're responding to\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Timelock (hours):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"168\",\n          value: timelock,\n          onChange: e => setTimelock(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        className: \"submit-btn\",\n        children: loading ? 'Creating Swap...' : 'Create Atomic Swap'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), swapResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Swap Created Successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Swap ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 16\n          }, this), \" \", swapResult.swapId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), swapResult.secret && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Secret:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 18\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: swapResult.secret\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hashed Secret:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 16\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: swapResult.hashedSecret\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), swapResult.txHash && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Transaction Hash:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 18\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: swapResult.txHash\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 53\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this), swapResult.btcSwapAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bitcoin Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 18\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: swapResult.btcSwapAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this), swapResult.dogeSwapAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dogecoin Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 18\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: swapResult.dogeSwapAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 53\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message\",\n          children: swapResult.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"warning\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\u26A0\\uFE0F Important:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), \" \", swapResult.secret ? 'Save the secret securely! You\\'ll need it to complete the swap.' : 'This is a response swap using a custom hashed secret.']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(SwapInterface, \"FpV8apdIXRHbTCWGCO9Ux53YoE8=\");\n_c = SwapInterface;\nexport default SwapInterface;\nvar _c;\n$RefreshReg$(_c, \"SwapInterface\");","map":{"version":3,"names":["React","useState","ethers","AtomicSwapContract","jsxDEV","_jsxDEV","SwapInterface","signer","provider","account","onSwapCreated","_s","swapDirection","setSwapDirection","ethAmount","setEthAmount","cryptoAmount","setCryptoAmount","cryptoAddress","setCryptoAddress","ethAddress","setEthAddress","timelock","setTimelock","loading","setLoading","swapResult","setSwapResult","useCustomHashedSecret","setUseCustomHashedSecret","customHashedSecret","setCustomHashedSecret","swapOptions","label","crypto","unit","generateSwapId","hexlify","randomBytes","generateSecret","response","fetch","method","headers","data","json","error","console","initiateEthToCryptoSwap","cryptoType","secret","hashedSecret","secretData","swapId","timelockTimestamp","Math","floor","Date","now","contract","Contract","address","abi","tx","initiateSwap","ZeroAddress","parseEther","value","wait","endpoint","body","JSON","stringify","toString","result","txHash","hash","message","toUpperCase","alert","initiateCryptoToEthSwap","repeat","handleSubmit","e","preventDefault","fromChain","toChain","split","currentOption","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","key","option","type","checked","onChange","target","onSubmit","step","placeholder","required","startsWith","endsWith","min","max","disabled","btcSwapAddress","dogeSwapAddress","_c","$RefreshReg$"],"sources":["/Users/yeknomhtooms/Desktop/trae_blockchain_app1/frontend/src/components/SwapInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport AtomicSwapContract from '../contracts/AtomicSwap.json';\n\nconst SwapInterface = ({ signer, provider, account, onSwapCreated }) => {\n  const [swapDirection, setSwapDirection] = useState('eth-to-btc');\n  const [ethAmount, setEthAmount] = useState('');\n  const [cryptoAmount, setCryptoAmount] = useState('');\n  const [cryptoAddress, setCryptoAddress] = useState('');\n  const [ethAddress, setEthAddress] = useState('');\n  const [timelock, setTimelock] = useState(24); // hours\n  const [loading, setLoading] = useState(false);\n  const [swapResult, setSwapResult] = useState(null);\n  const [useCustomHashedSecret, setUseCustomHashedSecret] = useState(false);\n  const [customHashedSecret, setCustomHashedSecret] = useState('');\n\n  const swapOptions = {\n    'eth-to-btc': { label: 'Ethereum → Bitcoin', crypto: 'BTC', unit: 'satoshis' },\n    'btc-to-eth': { label: 'Bitcoin → Ethereum', crypto: 'BTC', unit: 'satoshis' },\n    'eth-to-doge': { label: 'Ethereum → Dogecoin', crypto: 'DOGE', unit: 'dogeoshis' },\n    'doge-to-eth': { label: 'Dogecoin → Ethereum', crypto: 'DOGE', unit: 'dogeoshis' }\n  };\n\n  const generateSwapId = () => {\n    return ethers.hexlify(ethers.randomBytes(32));\n  };\n\n  const generateSecret = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/generate-secret', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      const data = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error generating secret:', error);\n      throw error;\n    }\n  };\n\n  const initiateEthToCryptoSwap = async (cryptoType) => {\n    try {\n      setLoading(true);\n      \n      let secret, hashedSecret;\n      \n      if (useCustomHashedSecret && customHashedSecret) {\n        hashedSecret = customHashedSecret;\n        secret = null; // We don't know the secret when using custom hashed secret\n      } else {\n        const secretData = await generateSecret();\n        secret = secretData.secret;\n        hashedSecret = secretData.hashedSecret;\n      }\n      \n      const swapId = generateSwapId();\n      const timelockTimestamp = Math.floor(Date.now() / 1000) + (timelock * 3600);\n\n      // Initialize contract\n      const contract = new ethers.Contract(\n        AtomicSwapContract.address,\n        AtomicSwapContract.abi,\n        signer\n      );\n\n      // Initiate swap on Ethereum\n      const tx = await contract.initiateSwap(\n        swapId,\n        account,\n        ethers.ZeroAddress, // ETH\n        ethers.parseEther(ethAmount),\n        hashedSecret,\n        timelockTimestamp,\n        { value: ethers.parseEther(ethAmount) }\n      );\n\n      await tx.wait();\n\n      // Register swap with backend\n      const endpoint = cryptoType === 'btc' ? 'eth-to-btc' : 'eth-to-doge';\n      const response = await fetch(`http://localhost:3001/api/swap/${endpoint}/initiate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          swapId,\n          ethAmount: ethers.parseEther(ethAmount).toString(),\n          [cryptoType + 'Amount']: cryptoAmount,\n          [cryptoType + 'Address']: cryptoAddress,\n          hashedSecret,\n          timelock: timelockTimestamp\n        })\n      });\n\n      const result = await response.json();\n      \n      setSwapResult({\n        swapId,\n        secret,\n        hashedSecret,\n        txHash: tx.hash,\n        message: `Ethereum to ${cryptoType.toUpperCase()} swap initiated successfully!`\n      });\n\n      onSwapCreated();\n    } catch (error) {\n      console.error('Error initiating swap:', error);\n      alert('Error initiating swap: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const initiateCryptoToEthSwap = async (cryptoType) => {\n    try {\n      setLoading(true);\n      \n      let secret, hashedSecret;\n      \n      if (useCustomHashedSecret && customHashedSecret) {\n        hashedSecret = customHashedSecret;\n        secret = null; // We don't know the secret when using custom hashed secret\n      } else {\n        const secretData = await generateSecret();\n        secret = secretData.secret;\n        hashedSecret = secretData.hashedSecret;\n      }\n      \n      const swapId = generateSwapId();\n      const timelockTimestamp = Math.floor(Date.now() / 1000) + (timelock * 3600);\n\n      const endpoint = cryptoType === 'btc' ? 'btc-to-eth' : 'doge-to-eth';\n      const response = await fetch(`http://localhost:3001/api/swap/${endpoint}/initiate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          swapId,\n          [cryptoType + 'Amount']: cryptoAmount,\n          ethAmount: ethers.parseEther(ethAmount).toString(),\n          ethAddress: ethAddress || account,\n          hashedSecret,\n          timelock: timelockTimestamp,\n          [cryptoType + 'SenderPubKey']: '02' + '0'.repeat(64), // Placeholder\n          [cryptoType + 'RecipientPubKey']: '03' + '0'.repeat(64) // Placeholder\n        })\n      });\n\n      const result = await response.json();\n      \n      setSwapResult({\n        swapId,\n        secret,\n        hashedSecret,\n        [cryptoType + 'SwapAddress']: result.data[cryptoType + 'SwapAddress'],\n        message: `${cryptoType.toUpperCase()} to Ethereum swap initiated! Please fund the ${cryptoType.toUpperCase()} address.`\n      });\n\n      onSwapCreated();\n    } catch (error) {\n      console.error('Error initiating swap:', error);\n      alert('Error initiating swap: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!ethAmount || !cryptoAmount) {\n      alert('Please enter both ETH and crypto amounts');\n      return;\n    }\n\n    if (useCustomHashedSecret && !customHashedSecret) {\n      alert('Please enter the hashed secret or uncheck the custom option');\n      return;\n    }\n\n    const [fromChain, toChain] = swapDirection.split('-to-');\n    \n    if (fromChain === 'eth') {\n      if (!cryptoAddress) {\n        alert(`Please enter ${toChain.toUpperCase()} address`);\n        return;\n      }\n      await initiateEthToCryptoSwap(toChain);\n    } else {\n      await initiateCryptoToEthSwap(fromChain);\n    }\n  };\n\n  const currentOption = swapOptions[swapDirection];\n\n  return (\n    <div className=\"swap-interface\">\n      <h2>Direct Atomic Swap</h2>\n      <p className=\"direct-description\">\n        Create direct peer-to-peer atomic swaps without intermediaries\n      </p>\n      \n      <div className=\"swap-direction\">\n        {Object.entries(swapOptions).map(([key, option]) => (\n          <label key={key}>\n            <input\n              type=\"radio\"\n              value={key}\n              checked={swapDirection === key}\n              onChange={(e) => setSwapDirection(e.target.value)}\n            />\n            {option.label}\n          </label>\n        ))}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"swap-form\">\n        <div className=\"form-group\">\n          <label>ETH Amount:</label>\n          <input\n            type=\"number\"\n            step=\"0.001\"\n            value={ethAmount}\n            onChange={(e) => setEthAmount(e.target.value)}\n            placeholder=\"0.1\"\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>{currentOption.crypto} Amount ({currentOption.unit}):</label>\n          <input\n            type=\"number\"\n            value={cryptoAmount}\n            onChange={(e) => setCryptoAmount(e.target.value)}\n            placeholder={currentOption.crypto === 'BTC' ? \"1000000\" : \"100000000\"}\n            required\n          />\n        </div>\n\n        {swapDirection.startsWith('eth-to-') && (\n          <div className=\"form-group\">\n            <label>{currentOption.crypto} Address:</label>\n            <input\n              type=\"text\"\n              value={cryptoAddress}\n              onChange={(e) => setCryptoAddress(e.target.value)}\n              placeholder={currentOption.crypto === 'BTC' ? \"bc1q...\" : \"D...\"}\n              required\n            />\n          </div>\n        )}\n\n        {swapDirection.endsWith('-to-eth') && (\n          <div className=\"form-group\">\n            <label>Ethereum Address (optional):</label>\n            <input\n              type=\"text\"\n              value={ethAddress}\n              onChange={(e) => setEthAddress(e.target.value)}\n              placeholder={account}\n            />\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={useCustomHashedSecret}\n              onChange={(e) => setUseCustomHashedSecret(e.target.checked)}\n            />\n            Use custom hashed secret (for responding to existing swaps)\n          </label>\n        </div>\n\n        {useCustomHashedSecret && (\n          <div className=\"form-group\">\n            <label>Hashed Secret:</label>\n            <input\n              type=\"text\"\n              value={customHashedSecret}\n              onChange={(e) => setCustomHashedSecret(e.target.value)}\n              placeholder=\"0x...\"\n              required\n            />\n            <small>Enter the hashed secret from the original swap you're responding to</small>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label>Timelock (hours):</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"168\"\n            value={timelock}\n            onChange={(e) => setTimelock(e.target.value)}\n            required\n          />\n        </div>\n\n        <button type=\"submit\" disabled={loading} className=\"submit-btn\">\n          {loading ? 'Creating Swap...' : 'Create Atomic Swap'}\n        </button>\n      </form>\n\n      {swapResult && (\n        <div className=\"swap-result\">\n          <h3>Swap Created Successfully!</h3>\n          <div className=\"result-details\">\n            <p><strong>Swap ID:</strong> {swapResult.swapId}</p>\n            {swapResult.secret && (\n              <p><strong>Secret:</strong> <code>{swapResult.secret}</code></p>\n            )}\n            <p><strong>Hashed Secret:</strong> <code>{swapResult.hashedSecret}</code></p>\n            {swapResult.txHash && (\n              <p><strong>Transaction Hash:</strong> <code>{swapResult.txHash}</code></p>\n            )}\n            {swapResult.btcSwapAddress && (\n              <p><strong>Bitcoin Address:</strong> <code>{swapResult.btcSwapAddress}</code></p>\n            )}\n            {swapResult.dogeSwapAddress && (\n              <p><strong>Dogecoin Address:</strong> <code>{swapResult.dogeSwapAddress}</code></p>\n            )}\n            <p className=\"message\">{swapResult.message}</p>\n          </div>\n          <div className=\"warning\">\n            <strong>⚠️ Important:</strong> {swapResult.secret ? 'Save the secret securely! You\\'ll need it to complete the swap.' : 'This is a response swap using a custom hashed secret.'}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SwapInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}